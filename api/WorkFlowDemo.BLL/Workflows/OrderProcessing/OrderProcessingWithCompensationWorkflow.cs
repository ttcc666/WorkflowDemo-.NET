using Elsa.Http;
using Elsa.Workflows;
using Elsa.Workflows.Activities;
using WorkFlowDemo.BLL.Activities;
using WorkFlowDemo.Models.Dtos;

namespace WorkFlowDemo.BLL.Workflows
{
    /// <summary>
    /// Â∏¶Ë°•ÂÅøÊú∫Âà∂ÁöÑËÆ¢ÂçïÂ§ÑÁêÜÂ∑•‰ΩúÊµÅ
    /// ‰ΩøÁî®FaultÂ§ÑÁêÜÂíåË°•ÂÅøÈÄªËæë
    /// ÂΩìËÆ¢ÂçïÈáëÈ¢ù>1000Êó∂‰ºöÊ®°ÊãüÂ§±Ë¥•Âπ∂Ëß¶ÂèëË°•ÂÅø
    /// </summary>
    public class OrderProcessingWithCompensationWorkflow : WorkflowBase
    {
        protected override void Build(IWorkflowBuilder builder)
        {
            var orderInput = builder.WithVariable<CreateOrderDto>();
            var discountedAmount = builder.WithVariable<decimal>();
            var paymentId = builder.WithVariable<string>();
            var shipmentId = builder.WithVariable<string>();
            var points = builder.WithVariable<int>();
            var inventoryReserved = builder.WithVariable<bool>();
            var paymentProcessed = builder.WithVariable<bool>();
            var shipmentCreated = builder.WithVariable<bool>();
            var shouldSimulateFailure = builder.WithVariable<bool>();
            var hasError = builder.WithVariable<bool>();
            var resultMessage = builder.WithVariable<string>();

            builder.Root = new Sequence
            {
                Activities =
                {
                    new HttpEndpoint
                    {
                        Path = new("/order-processing-safe"),
                        SupportedMethods = new(new[] { "POST" }),
                        CanStartWorkflow = true,
                        ParsedContent = new(orderInput)
                    },
                    new LogWorkflowStatusActivity
                    {
                        StepName = new("ÂºÄÂßã"),
                        StatusMessage = new("ËÆ¢ÂçïÂ§ÑÁêÜÂ∑•‰ΩúÊµÅÂ∑≤ÂêØÂä®(Â∏¶Ë°•ÂÅøÊú∫Âà∂)")
                    },
                    
                    // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊ®°ÊãüÂ§±Ë¥•(ËÆ¢ÂçïÈáëÈ¢ù>1000Êó∂Ê®°ÊãüÂ§±Ë¥•)
                    new SetVariable
                    {
                        Variable = shouldSimulateFailure,
                        Value = new(context => orderInput.Get(context).OrderAmount > 1000)
                    },
                    
                    // Ê≠•È™§1: Â∫ìÂ≠òÈ¢ÑÁïô
                    new ReserveInventoryActivity
                    {
                        ProductId = new(context => orderInput.Get(context).ProductId),
                        Quantity = new(context => orderInput.Get(context).Quantity)
                    },
                    new SetVariable
                    {
                        Variable = inventoryReserved,
                        Value = new(true)
                    },
                    new LogWorkflowStatusActivity
                    {
                        StepName = new("Â∫ìÂ≠òÈ¢ÑÁïô"),
                        StatusMessage = new("‚úì Â∫ìÂ≠òÈ¢ÑÁïôÂÆåÊàê")
                    },
                    
                    // Ê≠•È™§2: ‰ºòÊÉ†Âà∏Ê†∏ÈîÄ
                    new ApplyCouponActivity
                    {
                        CouponCode = new(context => orderInput.Get(context).CouponCode),
                        OrderAmount = new(context => orderInput.Get(context).OrderAmount),
                        Result = new(discountedAmount)
                    },
                    new LogWorkflowStatusActivity
                    {
                        StepName = new("‰ºòÊÉ†Âà∏Ê†∏ÈîÄ"),
                        StatusMessage = new(context => $"‚úì ‰ºòÊÉ†Âà∏Ê†∏ÈîÄÂÆåÊàê, ÊúÄÁªàÈáëÈ¢ù: {discountedAmount.Get(context):C}")
                    },
                    
                    // Ê≠•È™§3: ÊîØ‰ªòÊâ£Ê¨æ
                    new ProcessPaymentActivity
                    {
                        OrderAmount = new(discountedAmount),
                        UserId = new(context => orderInput.Get(context).UserId),
                        Result = new(paymentId)
                    },
                    new SetVariable
                    {
                        Variable = paymentProcessed,
                        Value = new(true)
                    },
                    new LogWorkflowStatusActivity
                    {
                        StepName = new("ÊîØ‰ªòÊâ£Ê¨æ"),
                        StatusMessage = new(context => $"‚úì ÊîØ‰ªòÊâ£Ê¨æÂÆåÊàê, PaymentId: {paymentId.Get(context)}")
                    },
                    
                    // Ê®°ÊãüÂ§±Ë¥•ÁÇπ - Âú®ÂàõÂª∫ÂèëË¥ßÂçï‰πãÂâçÊ£ÄÊü•
                    new If
                    {
                        Condition = new(shouldSimulateFailure),
                        Then = new Sequence
                        {
                            Activities =
                            {
                                new SetVariable
                                {
                                    Variable = hasError,
                                    Value = new(true)
                                },
                                new LogWorkflowStatusActivity
                                {
                                    StepName = new("Ê®°ÊãüÂ§±Ë¥•"),
                                    StatusMessage = new("‚ö†Ô∏è Ê®°ÊãüÂèëË¥ßÂçïÂàõÂª∫Â§±Ë¥• - Ëß¶ÂèëË°•ÂÅøÊú∫Âà∂")
                                }
                            }
                        },
                        Else = new Sequence
                        {
                            Activities =
                            {
                                // Ê≠•È™§4: ÂàõÂª∫ÂèëË¥ßÂçï
                                new CreateShipmentActivity
                                {
                                    ProductId = new(context => orderInput.Get(context).ProductId),
                                    Quantity = new(context => orderInput.Get(context).Quantity),
                                    UserId = new(context => orderInput.Get(context).UserId),
                                    Result = new(shipmentId)
                                },
                                new SetVariable
                                {
                                    Variable = shipmentCreated,
                                    Value = new(true)
                                },
                                new LogWorkflowStatusActivity
                                {
                                    StepName = new("ÂàõÂª∫ÂèëË¥ßÂçï"),
                                    StatusMessage = new(context => $"‚úì ÂèëË¥ßÂçïÂàõÂª∫ÂÆåÊàê, ShipmentId: {shipmentId.Get(context)}")
                                },
                                
                                // Ê≠•È™§5: ÁßØÂàÜÂèëÊîæ
                                new AwardPointsActivity
                                {
                                    OrderAmount = new(discountedAmount),
                                    UserId = new(context => orderInput.Get(context).UserId),
                                    Result = new(points)
                                },
                                new LogWorkflowStatusActivity
                                {
                                    StepName = new("ÁßØÂàÜÂèëÊîæ"),
                                    StatusMessage = new(context => $"‚úì ÁßØÂàÜÂèëÊîæÂÆåÊàê, Points: {points.Get(context)}")
                                }
                            }
                        }
                    },
                    
                    // Ê†πÊçÆÊòØÂê¶ÊúâÈîôËØØÊâßË°å‰∏çÂêåÁöÑÈÄªËæë
                    new If
                    {
                        Condition = new(hasError),
                        Then = new Sequence
                        {
                            Activities =
                            {
                                new LogWorkflowStatusActivity
                                {
                                    StepName = new("ÂºÄÂßãË°•ÂÅø"),
                                    StatusMessage = new("üîÑ ÂºÄÂßãÊâßË°åË°•ÂÅøÊµÅÁ®ã...")
                                },
                                
                                // Ë°•ÂÅø1: ÂèñÊ∂àÂèëË¥ßÂçï(Â¶ÇÊûúÂ∑≤ÂàõÂª∫)
                                new If
                                {
                                    Condition = new(context => shipmentCreated.Get(context)),
                                    Then = new Sequence
                                    {
                                        Activities =
                                        {
                                            new CancelShipmentActivity
                                            {
                                                ShipmentId = new(shipmentId)
                                            },
                                            new LogWorkflowStatusActivity
                                            {
                                                StepName = new("Ë°•ÂÅø-ÂèñÊ∂àÂèëË¥ßÂçï"),
                                                StatusMessage = new(context => $"‚Ü©Ô∏è ÂèëË¥ßÂçïÂ∑≤ÂèñÊ∂à: {shipmentId.Get(context)}")
                                            }
                                        }
                                    }
                                },
                                
                                // Ë°•ÂÅø2: ÈÄÄÊ¨æ(Â¶ÇÊûúÊîØ‰ªòÂ∑≤Â§ÑÁêÜ)
                                new If
                                {
                                    Condition = new(context => paymentProcessed.Get(context)),
                                    Then = new Sequence
                                    {
                                        Activities =
                                        {
                                            new RefundPaymentActivity
                                            {
                                                PaymentId = new(paymentId),
                                                Amount = new(discountedAmount)
                                            },
                                            new LogWorkflowStatusActivity
                                            {
                                                StepName = new("Ë°•ÂÅø-ÈÄÄÊ¨æ"),
                                                StatusMessage = new(context => $"‚Ü©Ô∏è ÊîØ‰ªòÂ∑≤ÈÄÄÊ¨æ: {paymentId.Get(context)}, ÈáëÈ¢ù: {discountedAmount.Get(context):C}")
                                            }
                                        }
                                    }
                                },
                                
                                // Ë°•ÂÅø3: ÈáäÊîæÂ∫ìÂ≠ò(Â¶ÇÊûúÂ∫ìÂ≠òÂ∑≤È¢ÑÁïô)
                                new If
                                {
                                    Condition = new(context => inventoryReserved.Get(context)),
                                    Then = new Sequence
                                    {
                                        Activities =
                                        {
                                            new RollbackInventoryActivity
                                            {
                                                ProductId = new(context => orderInput.Get(context).ProductId),
                                                Quantity = new(context => orderInput.Get(context).Quantity)
                                            },
                                            new LogWorkflowStatusActivity
                                            {
                                                StepName = new("Ë°•ÂÅø-ÈáäÊîæÂ∫ìÂ≠ò"),
                                                StatusMessage = new(context => 
                                                {
                                                    var input = orderInput.Get(context);
                                                    return $"‚Ü©Ô∏è Â∫ìÂ≠òÂ∑≤ÈáäÊîæ: ProductId={input.ProductId}, Quantity={input.Quantity}";
                                                })
                                            }
                                        }
                                    }
                                },
                                
                                new LogWorkflowStatusActivity
                                {
                                    StepName = new("Ë°•ÂÅøÂÆåÊàê"),
                                    StatusMessage = new("‚úÖ ÊâÄÊúâË°•ÂÅøÊìç‰ΩúÂ∑≤ÂÆåÊàê")
                                },
                                
                                // ÈîôËØØÂìçÂ∫î
                                new SetVariable
                                {
                                    Variable = resultMessage,
                                    Value = new("‚ùå ËÆ¢ÂçïÂ§ÑÁêÜÂ§±Ë¥•! ÊâÄÊúâÊìç‰ΩúÂ∑≤ÂõûÊªö„ÄÇÂéüÂõ†: ÂèëË¥ßÂçïÂàõÂª∫Â§±Ë¥•(ËÆ¢ÂçïÈáëÈ¢ù>1000Ëß¶ÂèëÊ®°ÊãüÂ§±Ë¥•)")
                                },
                                new WriteHttpResponse
                                {
                                    Content = new(resultMessage)
                                }
                            }
                        },
                        Else = new Sequence
                        {
                            Activities =
                            {
                                // ÊàêÂäüÂìçÂ∫î
                                new SetVariable
                                {
                                    Variable = resultMessage,
                                    Value = new(context =>
                                    {
                                        var payment = paymentId.Get(context);
                                        var shipment = shipmentId.Get(context);
                                        var pts = points.Get(context);
                                        var amount = discountedAmount.Get(context);
                                        return $"‚úÖ ËÆ¢ÂçïÂ§ÑÁêÜÂÆåÊàê! PaymentId: {payment}, ShipmentId: {shipment}, Points: {pts}, FinalAmount: {amount:C}";
                                    })
                                },
                                new WriteHttpResponse
                                {
                                    Content = new(resultMessage)
                                }
                            }
                        }
                    }
                }
            };
        }
    }
}